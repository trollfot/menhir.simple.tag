diff -ru /tmp/lovely.tag-1.0.0/src/lovely/tag/engine.py lovely.tag-1.0.0-py2.5.egg/lovely/tag/engine.py
--- /tmp/lovely.tag-1.0.0/src/lovely/tag/engine.py	2009-06-26 10:08:39.000000000 +0200
+++ lovely.tag-1.0.0-py2.5.egg/lovely/tag/engine.py	2009-08-11 23:44:39.000000000 +0200
@@ -91,19 +91,20 @@
         for t in tags:
             tags_tags.update(self._name_to_tagids.get(t, ()))
         old_tag_ids = tags_item.intersection(tags_user)
-        # any tags of the same user/item that are not in tags
-        old_tag_ids = old_tag_ids.difference(tags_tags)
+        # any tags of the same user/item that are  in tags
+        common_tag_ids = old_tag_ids.intersection(tags_tags)
             
-        old_tags = set([self._tagid_to_obj[id]
+        common_tags = set([self._tagid_to_obj[id].brain()
                         for id in old_tag_ids])
 
-        new_tags = set([tag.Tag(item, user, tagName)
+        new_tags = set([tag.Tag(item, user, tagName).brain()
                         for tagName in tags])
 
-        add_tags = new_tags.difference(old_tags)
+        add_tags = new_tags.difference(common_tags)
         
         add_tag_ids = []
-        for tagObj in add_tags:
+        for tagBrain in add_tags:
+            tagObj = tag.Tag.from_brain(tagBrain)
             id = self._add(tagObj)
             add_tag_ids.append(id)
             ids = self._user_to_tagids.get(user)
@@ -123,7 +124,7 @@
                 self._name_to_tagids[tagObj.name] = IOBTree.IOSet((id,))
             else:
                 ids.insert(id)
-        del_tag_ids = old_tag_ids.difference(add_tag_ids)
+        del_tag_ids = old_tag_ids.difference(tags_tags)
         self._delTags(del_tag_ids)
 
     def _delTags(self, del_tag_ids):
diff -ru /tmp/lovely.tag-1.0.0/src/lovely/tag/README.txt lovely.tag-1.0.0-py2.5.egg/lovely/tag/README.txt
--- /tmp/lovely.tag-1.0.0/src/lovely/tag/README.txt	2009-07-24 20:42:46.000000000 +0200
+++ lovely.tag-1.0.0-py2.5.egg/lovely/tag/README.txt	2009-08-12 00:23:39.000000000 +0200
@@ -25,7 +25,7 @@
 adapted to key references:
 
   >>> import zope.component
-  >>> from zope.keyreference import testing
+  >>> from zope.app.keyreference import testing
 
   >>> zope.component.provideAdapter(testing.SimpleKeyReference)
 
@@ -448,6 +448,14 @@
   [(u'Austria', 1), (u'USA', 1), (u'austria', 1),
    (u'lovely', 1), (u'personal', 1), (u'work', 1)]
 
+Re-updating tags for same user does not affect cloud weight
+
+  >>> engine.update(1, u'jodok', [u'USA',])
+  >>> sorted(engine.getCloud(items=[1, 2, 3], users=[u'srichter', u'jodok']))
+  [(u'Austria', 1), (u'USA', 1), (u'austria', 1),
+   (u'lovely', 1), (u'personal', 1), (u'work', 1)]
+
+
 Related Tags
 ------------
 
diff -ru /tmp/lovely.tag-1.0.0/src/lovely/tag/tag.py lovely.tag-1.0.0-py2.5.egg/lovely/tag/tag.py
--- /tmp/lovely.tag-1.0.0/src/lovely/tag/tag.py	2009-06-26 10:08:38.000000000 +0200
+++ lovely.tag-1.0.0-py2.5.egg/lovely/tag/tag.py	2009-08-11 23:37:40.000000000 +0200
@@ -48,6 +48,14 @@
         return cmp((self.item, self.user, self.name),
                    (other.item, other.user, other.name))
 
+    def brain(self):
+        """ representation to build sets"""
+        return (self.item, self.user, self.name)
+
+    @classmethod
+    def from_brain(cls, brain):
+        return cls(*brain)
+
     def __repr__(self):
         return '<%s %r for %i by %r>' %(
             self.__class__.__name__, self.name, self.item, self.user)
